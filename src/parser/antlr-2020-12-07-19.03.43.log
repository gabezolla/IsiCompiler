2020-12-07 19:03:40:459 grammar LogManager.java:25 before: (COMBINED_GRAMMAR IsiLang (@ header {
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {  program.setVarTable(symbolTable);
           	  program.setComandos(stack.pop());
           	 
           }))) (RULE decl (BLOCK (ALT (+ (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    } (* (BLOCK (ALT VIR ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    }))) SC))) (RULE tipo (BLOCK (ALT 'numero' { _tipo = IsiVariable.NUMBER;  }) (ALT 'texto' { _tipo = IsiVariable.TEXT;  }))) (RULE bloco (BLOCK (ALT { curThread = new ArrayList<AbstractCommand>(); 
	        stack.push(curThread);  
          } (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattrib) (ALT cmdselecao) (ALT cmdrepeticao))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID { verificaID(_input.LT(-1).getText());
                     	  _readID = _input.LT(-1).getText();
                        } FP SC {
              	IsiVariable var = (IsiVariable)symbolTable.get(_readID);
              	CommandLeitura cmd = new CommandLeitura(_readID, var);
              	stack.peek().add(cmd);
              }))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID { verificaID(_input.LT(-1).getText());
	                  _writeID = _input.LT(-1).getText();
                     } FP SC {
               	  CommandEscrita cmd = new CommandEscrita(_writeID);
               	  stack.peek().add(cmd);
               }))) (RULE cmdattrib (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
                    _exprID = _input.LT(-1).getText();
                   } ATTR { _exprContent = ""; } expr SC {
               	 CommandAtribuicao cmd = new CommandAtribuicao(_exprID, _exprContent);
               	 stack.peek().add(cmd);
               }))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID { _exprDecision = _input.LT(-1).getText(); } OPREL { _exprDecision += _input.LT(-1).getText(); } (BLOCK (ALT ID) (ALT NUMBER)) {_exprDecision += _input.LT(-1).getText(); } FP ACH { curThread = new ArrayList<AbstractCommand>(); 
                      stack.push(curThread);
                    } (+ (BLOCK (ALT cmd))) FCH {
                       listaTrue = stack.pop();	
                    } (? (BLOCK (ALT 'senao' ACH {
                   	 	curThread = new ArrayList<AbstractCommand>();
                   	 	stack.push(curThread);
                   	 } (BLOCK (ALT (+ (BLOCK (ALT cmd))))) FCH {
                   		listaFalse = stack.pop();
                   		CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
                   		stack.peek().add(cmd);
                   	})))))) (RULE cmdrepeticao (BLOCK (ALT 'enquanto' AP ID { _exprDecision = _input.LT(-1).getText(); }))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText();} termo)))))) (RULE termo (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
	               _exprContent += _input.LT(-1).getText();
                 }) (ALT NUMBER {
              	_exprContent += _input.LT(-1).getText();
              }))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE OP (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/'))) (RULE ATTR (BLOCK (ALT '='))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r'))) skip)))))
2020-12-07 19:03:40:482 grammar LogManager.java:25 after: (COMBINED_GRAMMAR IsiLang (@ header {
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {  program.setVarTable(symbolTable);
           	  program.setComandos(stack.pop());
           	 
           }))) (RULE decl (BLOCK (ALT (+ (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    } (* (BLOCK (ALT VIR ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    }))) SC))) (RULE tipo (BLOCK (ALT 'numero' { _tipo = IsiVariable.NUMBER;  }) (ALT 'texto' { _tipo = IsiVariable.TEXT;  }))) (RULE bloco (BLOCK (ALT { curThread = new ArrayList<AbstractCommand>(); 
	        stack.push(curThread);  
          } (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattrib) (ALT cmdselecao) (ALT cmdrepeticao))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID { verificaID(_input.LT(-1).getText());
                     	  _readID = _input.LT(-1).getText();
                        } FP SC {
              	IsiVariable var = (IsiVariable)symbolTable.get(_readID);
              	CommandLeitura cmd = new CommandLeitura(_readID, var);
              	stack.peek().add(cmd);
              }))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID { verificaID(_input.LT(-1).getText());
	                  _writeID = _input.LT(-1).getText();
                     } FP SC {
               	  CommandEscrita cmd = new CommandEscrita(_writeID);
               	  stack.peek().add(cmd);
               }))) (RULE cmdattrib (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
                    _exprID = _input.LT(-1).getText();
                   } ATTR { _exprContent = ""; } expr SC {
               	 CommandAtribuicao cmd = new CommandAtribuicao(_exprID, _exprContent);
               	 stack.peek().add(cmd);
               }))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID { _exprDecision = _input.LT(-1).getText(); } OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) {_exprDecision += _input.LT(-1).getText(); } FP ACH { curThread = new ArrayList<AbstractCommand>(); 
                      stack.push(curThread);
                    } (+ (BLOCK (ALT cmd))) FCH {
                       listaTrue = stack.pop();	
                    } (? (BLOCK (ALT 'senao' ACH {
                   	 	curThread = new ArrayList<AbstractCommand>();
                   	 	stack.push(curThread);
                   	 } (BLOCK (ALT (+ (BLOCK (ALT cmd))))) FCH {
                   		listaFalse = stack.pop();
                   		CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
                   		stack.peek().add(cmd);
                   	})))))) (RULE cmdrepeticao (BLOCK (ALT 'enquanto' AP ID { _exprDecision = _input.LT(-1).getText(); }))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText();} termo)))))) (RULE termo (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
	               _exprContent += _input.LT(-1).getText();
                 }) (ALT NUMBER {
              	_exprContent += _input.LT(-1).getText();
              }))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE OP (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE ATTR (BLOCK (ALT '='))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n' '\r')) skip)))))
2020-12-07 19:03:40:527 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR IsiLang (@ header {
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {  program.setVarTable(symbolTable);
           	  program.setComandos(stack.pop());
           	 
           }))) (RULE decl (BLOCK (ALT (+ (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    } (* (BLOCK (ALT VIR ID {
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    }))) SC))) (RULE tipo (BLOCK (ALT 'numero' { _tipo = IsiVariable.NUMBER;  }) (ALT 'texto' { _tipo = IsiVariable.TEXT;  }))) (RULE bloco (BLOCK (ALT { curThread = new ArrayList<AbstractCommand>(); 
	        stack.push(curThread);  
          } (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattrib) (ALT cmdselecao) (ALT cmdrepeticao))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID { verificaID(_input.LT(-1).getText());
                     	  _readID = _input.LT(-1).getText();
                        } FP SC {
              	IsiVariable var = (IsiVariable)symbolTable.get(_readID);
              	CommandLeitura cmd = new CommandLeitura(_readID, var);
              	stack.peek().add(cmd);
              }))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID { verificaID(_input.LT(-1).getText());
	                  _writeID = _input.LT(-1).getText();
                     } FP SC {
               	  CommandEscrita cmd = new CommandEscrita(_writeID);
               	  stack.peek().add(cmd);
               }))) (RULE cmdattrib (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
                    _exprID = _input.LT(-1).getText();
                   } ATTR { _exprContent = ""; } expr SC {
               	 CommandAtribuicao cmd = new CommandAtribuicao(_exprID, _exprContent);
               	 stack.peek().add(cmd);
               }))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID { _exprDecision = _input.LT(-1).getText(); } OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) {_exprDecision += _input.LT(-1).getText(); } FP ACH { curThread = new ArrayList<AbstractCommand>(); 
                      stack.push(curThread);
                    } (+ (BLOCK (ALT cmd))) FCH {
                       listaTrue = stack.pop();	
                    } (? (BLOCK (ALT 'senao' ACH {
                   	 	curThread = new ArrayList<AbstractCommand>();
                   	 	stack.push(curThread);
                   	 } (BLOCK (ALT (+ (BLOCK (ALT cmd))))) FCH {
                   		listaFalse = stack.pop();
                   		CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
                   		stack.peek().add(cmd);
                   	})))))) (RULE cmdrepeticao (BLOCK (ALT 'enquanto' AP ID { _exprDecision = _input.LT(-1).getText(); }))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText();} termo)))))) (RULE termo (BLOCK (ALT ID { verificaID(_input.LT(-1).getText());
	               _exprContent += _input.LT(-1).getText();
                 }) (ALT NUMBER {
              	_exprContent += _input.LT(-1).getText();
              })))))
2020-12-07 19:03:40:528 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR IsiLangLexer (@ header {
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE T__0 (BLOCK (ALT 'programa'))) (RULE T__1 (BLOCK (ALT 'fimprog;'))) (RULE T__2 (BLOCK (ALT 'numero'))) (RULE T__3 (BLOCK (ALT 'texto'))) (RULE T__4 (BLOCK (ALT 'leia'))) (RULE T__5 (BLOCK (ALT 'escreva'))) (RULE T__6 (BLOCK (ALT 'se'))) (RULE T__7 (BLOCK (ALT 'senao'))) (RULE T__8 (BLOCK (ALT 'enquanto'))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE OP (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE ATTR (BLOCK (ALT '='))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n' '\r')) skip)))))
2020-12-07 19:03:41:432 action-translator LogManager.java:25 translate 
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2020-12-07 19:03:41:432 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

2020-12-07 19:03:41:484 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, AP=10, FP=11, SC=12, OP=13, ATTR=14, VIR=15, ACH=16, FCH=17, OPREL=18, ID=19, NUMBER=20, WS=21}
2020-12-07 19:03:41:484 semantics LogManager.java:25 strings={'programa'=1, 'fimprog;'=2, 'numero'=3, 'texto'=4, 'leia'=5, 'escreva'=6, 'se'=7, 'senao'=8, 'enquanto'=9, '('=10, ')'=11, ';'=12, '='=14, ','=15, '{'=16, '}'=17}
2020-12-07 19:03:41:497 LL1 LogManager.java:25 
DECISION 0 in rule decl
2020-12-07 19:03:41:497 LL1 LogManager.java:25 look=[{3..4}, {5..7, 9, 19}]
2020-12-07 19:03:41:497 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:497 LL1 LogManager.java:25 
DECISION 1 in rule declaravar
2020-12-07 19:03:41:497 LL1 LogManager.java:25 look=[15, 12]
2020-12-07 19:03:41:497 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:497 LL1 LogManager.java:25 
DECISION 2 in rule tipo
2020-12-07 19:03:41:497 LL1 LogManager.java:25 look=[3, 4]
2020-12-07 19:03:41:497 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:497 LL1 LogManager.java:25 
DECISION 3 in rule bloco
2020-12-07 19:03:41:497 LL1 LogManager.java:25 look=[{5..7, 9, 19}, 2]
2020-12-07 19:03:41:497 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:497 LL1 LogManager.java:25 
DECISION 4 in rule cmd
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[5, 6, 19, 7, 9]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:498 LL1 LogManager.java:25 
DECISION 5 in rule cmdselecao
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[{5..7, 9, 19}, 17]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:498 LL1 LogManager.java:25 
DECISION 6 in rule cmdselecao
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[{5..7, 9, 19}, 17]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:498 LL1 LogManager.java:25 
DECISION 7 in rule cmdselecao
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[8, {2, 5..7, 9, 17, 19}]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:498 LL1 LogManager.java:25 
DECISION 8 in rule expr
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[13, 12]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:498 LL1 LogManager.java:25 
DECISION 9 in rule termo
2020-12-07 19:03:41:498 LL1 LogManager.java:25 look=[19, 20]
2020-12-07 19:03:41:498 LL1 LogManager.java:25 LL(1)? true
2020-12-07 19:03:41:499 action-translator LogManager.java:25 translate 
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2020-12-07 19:03:41:499 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

2020-12-07 19:03:41:511 action-translator LogManager.java:25 translate   program.setVarTable(symbolTable);
           	  program.setComandos(stack.pop());
           	 
           
2020-12-07 19:03:41:514 action-translator LogManager.java:25 translate 
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    
2020-12-07 19:03:41:514 action-translator LogManager.java:25 translate 
	                  _varName = _input.LT(-1).getText();
	                  _varValue = null;
	                  symbol = new IsiVariable(_varName, _tipo, _varValue);
	                  if (!symbolTable.exists(_varName)){
	                     symbolTable.add(symbol);	
	                  }
	                  else{
	                  	 throw new IsiSemanticException("Symbol "+_varName+" already declared");
	                  }
                    
2020-12-07 19:03:41:515 action-translator LogManager.java:25 translate  _tipo = IsiVariable.NUMBER;  
2020-12-07 19:03:41:515 action-translator LogManager.java:25 translate  _tipo = IsiVariable.TEXT;  
2020-12-07 19:03:41:516 action-translator LogManager.java:25 translate  curThread = new ArrayList<AbstractCommand>(); 
	        stack.push(curThread);  
          
2020-12-07 19:03:41:517 action-translator LogManager.java:25 translate  verificaID(_input.LT(-1).getText());
                     	  _readID = _input.LT(-1).getText();
                        
2020-12-07 19:03:41:517 action-translator LogManager.java:25 translate 
              	IsiVariable var = (IsiVariable)symbolTable.get(_readID);
              	CommandLeitura cmd = new CommandLeitura(_readID, var);
              	stack.peek().add(cmd);
              
2020-12-07 19:03:41:518 action-translator LogManager.java:25 translate  verificaID(_input.LT(-1).getText());
	                  _writeID = _input.LT(-1).getText();
                     
2020-12-07 19:03:41:518 action-translator LogManager.java:25 translate 
               	  CommandEscrita cmd = new CommandEscrita(_writeID);
               	  stack.peek().add(cmd);
               
2020-12-07 19:03:41:518 action-translator LogManager.java:25 translate  verificaID(_input.LT(-1).getText());
                    _exprID = _input.LT(-1).getText();
                   
2020-12-07 19:03:41:518 action-translator LogManager.java:25 translate  _exprContent = ""; 
2020-12-07 19:03:41:519 action-translator LogManager.java:25 translate 
               	 CommandAtribuicao cmd = new CommandAtribuicao(_exprID, _exprContent);
               	 stack.peek().add(cmd);
               
2020-12-07 19:03:41:519 action-translator LogManager.java:25 translate  _exprDecision = _input.LT(-1).getText(); 
2020-12-07 19:03:41:519 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2020-12-07 19:03:41:519 action-translator LogManager.java:25 translate _exprDecision += _input.LT(-1).getText(); 
2020-12-07 19:03:41:520 action-translator LogManager.java:25 translate  curThread = new ArrayList<AbstractCommand>(); 
                      stack.push(curThread);
                    
2020-12-07 19:03:41:520 action-translator LogManager.java:25 translate 
                       listaTrue = stack.pop();	
                    
2020-12-07 19:03:41:520 action-translator LogManager.java:25 translate 
                   	 	curThread = new ArrayList<AbstractCommand>();
                   	 	stack.push(curThread);
                   	 
2020-12-07 19:03:41:520 action-translator LogManager.java:25 translate 
                   		listaFalse = stack.pop();
                   		CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
                   		stack.peek().add(cmd);
                   	
2020-12-07 19:03:41:521 action-translator LogManager.java:25 translate  _exprDecision = _input.LT(-1).getText(); 
2020-12-07 19:03:41:521 action-translator LogManager.java:25 translate  _exprContent += _input.LT(-1).getText();
2020-12-07 19:03:41:522 action-translator LogManager.java:25 translate  verificaID(_input.LT(-1).getText());
	               _exprContent += _input.LT(-1).getText();
                 
2020-12-07 19:03:41:522 action-translator LogManager.java:25 translate 
              	_exprContent += _input.LT(-1).getText();
              
2020-12-07 19:03:41:551 action-translator LogManager.java:25 translate 
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2020-12-07 19:03:41:551 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

2020-12-07 19:03:41:551 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

2020-12-07 19:03:41:558 action-translator LogManager.java:25 translate 
	private int _tipo;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2020-12-07 19:03:41:558 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

2020-12-07 19:03:41:559 action-translator LogManager.java:25 translate 
	import src.datastructures.IsiSymbol;
	import src.datastructures.IsiVariable;
	import src.datastructures.IsiSymbolTable;
	import src.exceptions.IsiSemanticException;
	import src.ast.IsiProgram;
	import src.ast.AbstractCommand;
	import src.ast.CommandLeitura;
	import src.ast.CommandEscrita;
	import src.ast.CommandAtribuicao;
	import src.ast.CommandDecisao;
	import java.util.ArrayList;
	import java.util.Stack;

